# code: language=ansible

# Set of tasks for creating a Trilio for Kubernetes Backup where auth is kubeconfig
#
# Authors: Kevin Jackson <kevin.jackson at trilio io>

- name: Execute Backup Tasks
  tags: ['backup', 'backupplan', 'smoketest', 'autoprotect']
  block:
#    - name: Set backup name
#      ansible.builtin.set_fact:
#        trilio_kubernetes_backup_name_var: "{{ item }}-{{ trilio_kubernetes_backupplan_type }}"
#        trilio_kubernetes_backup_name: "{{ trilio_kubernetes_backup_name_var }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }}"
#      loop: "{{ namespaces_batch }}"

    - name: Configure the backup for {{ item }}
      ansible.builtin.template:
        src: templates/backup.yaml.j2
        dest: /tmp/{{ trilio_kubernetes_backupplan_name_var }}-backup.yaml
        mode: "0600"
      loop: "{{ namespaces_batch }}"

    # Create the specified backup plan in specifed namespace
    - name: Execute the backup of {{ trilio_kubernetes_backupplan_name_var }}
      kubernetes.core.k8s:
        api_version: "triliovault.trilio.io/v1"
        kind: Backup
        state: present
        namespace: "{{ item }}"
        src: "/tmp/{{ trilio_kubernetes_backupplan_name_var }}-backup.yaml"
        validate_certs: false
        wait: true
        wait_sleep: 30
        wait_timeout: 10
      register: trilio_kubernetes_backup
      loop: "{{ namespaces_batch }}"

    - name: Wait for backups to complete "{{ item }}""
      when:
        - trilio_kubernetes_auth_type == "external"
        - trilio_kubernetes_backup_wait | bool
      kubernetes.core.k8s_info:
        api_version: "triliovault.trilio.io/v1"
        kind: Backup
        namespace: "{{ item }}"
        name: "{{ trilio_kubernetes_backupplan_name_var }}-{{ trilio_kubernetes_backup_timestamp }}"
        validate_certs: false
      register: backups
      retries: "{{ trilio_kubernetes_backup_polling_retries }}"
      delay: "{{ trilio_kubernetes_restore_polling_every_seconds }}"
      until: backups.resources is defined and
        backups.resources | length > 0 and
        backups.resources[0].status.status == 'Available'
      loop: "{{ namespaces_batch }}"

#    - name: Wait for backup of {{ trilio_kubernetes_backup_name }}
#      when:
#        - trilio_kubernetes_auth_type == "external"
#        - trilio_kubernetes_backup_wait | bool
#      ansible.builtin.shell:
#        kubectl -s $K8S_AUTH_HOST --token="$K8S_AUTH_API_KEY" --insecure-skip-tls-verify \
#          get backups/{{ trilio_kubernetes_backup_name }} -n {{ trilio_kubernetes_namespace_var }}
#      register: trilio_kubernetes_backup_available
#      retries: "{{ trilio_kubernetes_backup_polling_retries }}"
#      delay: "{{ trilio_kubernetes_backup_polling_every_seconds }}"
#      until: trilio_kubernetes_backup_available.stdout.find("Available") != -1
#      ignore_errors: true
#      changed_when: trilio_kubernetes_backup_available.rc != 0

#    - name: Wait for backup of {{ trilio_kubernetes_backup_name }}
#      when:
#        - trilio_kubernetes_auth_type == "kubeconfig"
#        - trilio_kubernetes_backup_wait | bool
#      ansible.builtin.shell: >
#        kubectl get backups/{{ trilio_kubernetes_backupplan_name_var }}-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }} \
#          -n {{ trilio_kubernetes_namespace_var }}
#      environment:
#        KUBECONFIG: "{{ trilio_kubernetes_kubeconfig }}"
#      register: trilio_kubernetes_backup_available
#      retries: "{{ trilio_kubernetes_backup_polling_retries }}"
#      delay: "{{ trilio_kubernetes_backup_polling_every_seconds }}"
#      until: trilio_kubernetes_backup_available.stdout.find("Available") != -1
#      ignore_errors: true
#      changed_when: trilio_kubernetes_backup_available.rc != 0
